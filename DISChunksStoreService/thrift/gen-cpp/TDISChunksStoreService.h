/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TDISChunksStoreService_H
#define TDISChunksStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "dischunksstoreservice_types.h"

namespace DIS {

class TDISChunksStoreServiceIf {
 public:
  virtual ~TDISChunksStoreServiceIf() {}
  virtual bool add(const int64_t fileId, const int32_t chunkNumber, const std::string& chunkData) = 0;
  virtual bool remove(const int64_t fileId, const int32_t chunkNumber) = 0;
  virtual void get(std::string& _return, const int64_t fileId, const int32_t chunkNumber) = 0;
};

class TDISChunksStoreServiceIfFactory {
 public:
  typedef TDISChunksStoreServiceIf Handler;

  virtual ~TDISChunksStoreServiceIfFactory() {}

  virtual TDISChunksStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TDISChunksStoreServiceIf* /* handler */) = 0;
};

class TDISChunksStoreServiceIfSingletonFactory : virtual public TDISChunksStoreServiceIfFactory {
 public:
  TDISChunksStoreServiceIfSingletonFactory(const boost::shared_ptr<TDISChunksStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TDISChunksStoreServiceIfSingletonFactory() {}

  virtual TDISChunksStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TDISChunksStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TDISChunksStoreServiceIf> iface_;
};

class TDISChunksStoreServiceNull : virtual public TDISChunksStoreServiceIf {
 public:
  virtual ~TDISChunksStoreServiceNull() {}
  bool add(const int64_t /* fileId */, const int32_t /* chunkNumber */, const std::string& /* chunkData */) {
    bool _return = false;
    return _return;
  }
  bool remove(const int64_t /* fileId */, const int32_t /* chunkNumber */) {
    bool _return = false;
    return _return;
  }
  void get(std::string& /* _return */, const int64_t /* fileId */, const int32_t /* chunkNumber */) {
    return;
  }
};

typedef struct _TDISChunksStoreService_add_args__isset {
  _TDISChunksStoreService_add_args__isset() : fileId(false), chunkNumber(false), chunkData(false) {}
  bool fileId;
  bool chunkNumber;
  bool chunkData;
} _TDISChunksStoreService_add_args__isset;

class TDISChunksStoreService_add_args {
 public:

  TDISChunksStoreService_add_args() : fileId(0), chunkNumber(0), chunkData() {
  }

  virtual ~TDISChunksStoreService_add_args() throw() {}

  int64_t fileId;
  int32_t chunkNumber;
  std::string chunkData;

  _TDISChunksStoreService_add_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  void __set_chunkNumber(const int32_t val) {
    chunkNumber = val;
  }

  void __set_chunkData(const std::string& val) {
    chunkData = val;
  }

  bool operator == (const TDISChunksStoreService_add_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(chunkNumber == rhs.chunkNumber))
      return false;
    if (!(chunkData == rhs.chunkData))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TDISChunksStoreService_add_pargs {
 public:


  virtual ~TDISChunksStoreService_add_pargs() throw() {}

  const int64_t* fileId;
  const int32_t* chunkNumber;
  const std::string* chunkData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_add_result__isset {
  _TDISChunksStoreService_add_result__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_add_result__isset;

class TDISChunksStoreService_add_result {
 public:

  TDISChunksStoreService_add_result() : success(0) {
  }

  virtual ~TDISChunksStoreService_add_result() throw() {}

  bool success;

  _TDISChunksStoreService_add_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TDISChunksStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_add_presult__isset {
  _TDISChunksStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_add_presult__isset;

class TDISChunksStoreService_add_presult {
 public:


  virtual ~TDISChunksStoreService_add_presult() throw() {}

  bool* success;

  _TDISChunksStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TDISChunksStoreService_remove_args__isset {
  _TDISChunksStoreService_remove_args__isset() : fileId(false), chunkNumber(false) {}
  bool fileId;
  bool chunkNumber;
} _TDISChunksStoreService_remove_args__isset;

class TDISChunksStoreService_remove_args {
 public:

  TDISChunksStoreService_remove_args() : fileId(0), chunkNumber(0) {
  }

  virtual ~TDISChunksStoreService_remove_args() throw() {}

  int64_t fileId;
  int32_t chunkNumber;

  _TDISChunksStoreService_remove_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  void __set_chunkNumber(const int32_t val) {
    chunkNumber = val;
  }

  bool operator == (const TDISChunksStoreService_remove_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(chunkNumber == rhs.chunkNumber))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TDISChunksStoreService_remove_pargs {
 public:


  virtual ~TDISChunksStoreService_remove_pargs() throw() {}

  const int64_t* fileId;
  const int32_t* chunkNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_remove_result__isset {
  _TDISChunksStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_remove_result__isset;

class TDISChunksStoreService_remove_result {
 public:

  TDISChunksStoreService_remove_result() : success(0) {
  }

  virtual ~TDISChunksStoreService_remove_result() throw() {}

  bool success;

  _TDISChunksStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TDISChunksStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_remove_presult__isset {
  _TDISChunksStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_remove_presult__isset;

class TDISChunksStoreService_remove_presult {
 public:


  virtual ~TDISChunksStoreService_remove_presult() throw() {}

  bool* success;

  _TDISChunksStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TDISChunksStoreService_get_args__isset {
  _TDISChunksStoreService_get_args__isset() : fileId(false), chunkNumber(false) {}
  bool fileId;
  bool chunkNumber;
} _TDISChunksStoreService_get_args__isset;

class TDISChunksStoreService_get_args {
 public:

  TDISChunksStoreService_get_args() : fileId(0), chunkNumber(0) {
  }

  virtual ~TDISChunksStoreService_get_args() throw() {}

  int64_t fileId;
  int32_t chunkNumber;

  _TDISChunksStoreService_get_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  void __set_chunkNumber(const int32_t val) {
    chunkNumber = val;
  }

  bool operator == (const TDISChunksStoreService_get_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(chunkNumber == rhs.chunkNumber))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TDISChunksStoreService_get_pargs {
 public:


  virtual ~TDISChunksStoreService_get_pargs() throw() {}

  const int64_t* fileId;
  const int32_t* chunkNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_get_result__isset {
  _TDISChunksStoreService_get_result__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_get_result__isset;

class TDISChunksStoreService_get_result {
 public:

  TDISChunksStoreService_get_result() : success() {
  }

  virtual ~TDISChunksStoreService_get_result() throw() {}

  std::string success;

  _TDISChunksStoreService_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TDISChunksStoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TDISChunksStoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDISChunksStoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TDISChunksStoreService_get_presult__isset {
  _TDISChunksStoreService_get_presult__isset() : success(false) {}
  bool success;
} _TDISChunksStoreService_get_presult__isset;

class TDISChunksStoreService_get_presult {
 public:


  virtual ~TDISChunksStoreService_get_presult() throw() {}

  std::string* success;

  _TDISChunksStoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TDISChunksStoreServiceClient : virtual public TDISChunksStoreServiceIf {
 public:
  TDISChunksStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TDISChunksStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool add(const int64_t fileId, const int32_t chunkNumber, const std::string& chunkData);
  void send_add(const int64_t fileId, const int32_t chunkNumber, const std::string& chunkData);
  bool recv_add();
  bool remove(const int64_t fileId, const int32_t chunkNumber);
  void send_remove(const int64_t fileId, const int32_t chunkNumber);
  bool recv_remove();
  void get(std::string& _return, const int64_t fileId, const int32_t chunkNumber);
  void send_get(const int64_t fileId, const int32_t chunkNumber);
  void recv_get(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TDISChunksStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TDISChunksStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TDISChunksStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TDISChunksStoreServiceProcessor(boost::shared_ptr<TDISChunksStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TDISChunksStoreServiceProcessor::process_add;
    processMap_["remove"] = &TDISChunksStoreServiceProcessor::process_remove;
    processMap_["get"] = &TDISChunksStoreServiceProcessor::process_get;
  }

  virtual ~TDISChunksStoreServiceProcessor() {}
};

class TDISChunksStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TDISChunksStoreServiceProcessorFactory(const ::boost::shared_ptr< TDISChunksStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TDISChunksStoreServiceIfFactory > handlerFactory_;
};

class TDISChunksStoreServiceMultiface : virtual public TDISChunksStoreServiceIf {
 public:
  TDISChunksStoreServiceMultiface(std::vector<boost::shared_ptr<TDISChunksStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TDISChunksStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TDISChunksStoreServiceIf> > ifaces_;
  TDISChunksStoreServiceMultiface() {}
  void add(boost::shared_ptr<TDISChunksStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool add(const int64_t fileId, const int32_t chunkNumber, const std::string& chunkData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(fileId, chunkNumber, chunkData);
    }
    return ifaces_[i]->add(fileId, chunkNumber, chunkData);
  }

  bool remove(const int64_t fileId, const int32_t chunkNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(fileId, chunkNumber);
    }
    return ifaces_[i]->remove(fileId, chunkNumber);
  }

  void get(std::string& _return, const int64_t fileId, const int32_t chunkNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, fileId, chunkNumber);
    }
    ifaces_[i]->get(_return, fileId, chunkNumber);
    return;
  }

};

} // namespace

#endif
